"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter = (function () {
    function EventEmitter() {
        this.listeners = new Map();
    }
    EventEmitter.prototype.emit = function (eventName) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var listeners = this.listeners.get(eventName);
        if (listeners !== undefined) {
            console.assert(listeners.length > 0, "No listener for event '" + eventName + "'");
            listeners.forEach(function (listener) { return listener.apply(void 0, __spread(args)); });
        }
    };
    EventEmitter.prototype.addListener = function (eventName, listener) {
        if (!this.listeners.has(eventName))
            this.listeners.set(eventName, []);
        var listeners = this.listeners.get(eventName);
        console.assert(listeners.indexOf(listener) === -1, "Listener already added for event '" + eventName + "'");
        listeners.push(listener);
    };
    EventEmitter.prototype.removeListener = function (eventName, listener) {
        var listeners = this.listeners.get(eventName);
        console.assert(listeners !== undefined, "Unknown event '" + eventName + "'");
        var index = listeners.lastIndexOf(listener);
        console.assert(index > -1, "Listener not found for event '" + eventName + "'");
        listeners.splice(index, 1);
        if (listeners.length === 0)
            this.listeners.delete(eventName);
    };
    return EventEmitter;
}());
exports.EventEmitter = EventEmitter;
//# sourceMappingURL=EventEmitter.js.map