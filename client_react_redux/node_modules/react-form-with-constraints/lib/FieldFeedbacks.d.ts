/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormWithConstraintsChildContext } from './FormWithConstraints';
import { IValidateEventEmitter } from './withValidateEventEmitter';
import { EventEmitter } from './EventEmitter';
import Input from './Input';
export interface FieldFeedbacksProps extends React.HTMLAttributes<HTMLDivElement> {
    for: string;
    show?: 'first' | 'all';
}
export interface FieldFeedbacksChildContext {
    fieldFeedbacks: IFieldFeedbacks;
}
export interface IFieldFeedbacks extends IValidateEventEmitter {
    props: FieldFeedbacksProps;
    key: number;
    computeFieldFeedbackKey(): number;
}
export declare class FieldFeedbacksComponent extends React.Component<FieldFeedbacksProps> {
}
declare const FieldFeedbacks_base: {
    new (...args: any[]): {
        validateEventEmitter: EventEmitter;
        emitValidateEvent(input: Input): void;
        addValidateEventListener(listener: (input: Input) => void): void;
        removeValidateEventListener(listener: (input: Input) => void): void;
    };
} & typeof FieldFeedbacksComponent;
export declare class FieldFeedbacks extends FieldFeedbacks_base {
    static defaultProps: Partial<FieldFeedbacksProps>;
    static contextTypes: {
        form: PropTypes.Validator<any>;
    };
    context: FormWithConstraintsChildContext;
    static childContextTypes: {
        fieldFeedbacks: PropTypes.Validator<any>;
    };
    getChildContext(): FieldFeedbacksChildContext;
    key: number;
    constructor(props: FieldFeedbacksProps, context: FormWithConstraintsChildContext);
    private fieldFeedbackKey;
    computeFieldFeedbackKey(): number;
    componentWillMount(): void;
    componentWillUnmount(): void;
    validate(input: Input): void;
    reRender(_fieldName: string): void;
    render(): JSX.Element;
}
