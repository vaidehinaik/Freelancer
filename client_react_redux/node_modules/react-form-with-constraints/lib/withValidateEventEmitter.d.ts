import { EventEmitter } from './EventEmitter';
import Input from './Input';
import Constructor from './Constructor';
export declare const ValidateEvent = "VALIDATE_EVENT";
export declare type ValidateEventListener = (input: Input) => void;
export interface IValidateEventEmitter {
    emitValidateEvent(input: Input): void;
    addValidateEventListener(listener: ValidateEventListener): void;
    removeValidateEventListener(listener: ValidateEventListener): void;
}
export declare function withValidateEventEmitter<TBase extends Constructor<{}>>(Base: TBase): {
    new (...args: any[]): {
        validateEventEmitter: EventEmitter;
        emitValidateEvent(input: Input): void;
        addValidateEventListener(listener: ValidateEventListener): void;
        removeValidateEventListener(listener: ValidateEventListener): void;
    };
} & TBase;
