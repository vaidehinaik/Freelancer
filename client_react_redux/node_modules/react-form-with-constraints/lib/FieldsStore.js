"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var EventEmitter_1 = require("./EventEmitter");
var fieldWithoutFeedback_1 = require("./fieldWithoutFeedback");
var FieldEvent;
(function (FieldEvent) {
    FieldEvent["Added"] = "FIELD_ADDED";
    FieldEvent["Removed"] = "FIELD_REMOVED";
    FieldEvent["Updated"] = "FIELD_UPDATED";
})(FieldEvent = exports.FieldEvent || (exports.FieldEvent = {}));
var FieldsStore = (function (_super) {
    __extends(FieldsStore, _super);
    function FieldsStore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fields = Object.create(null);
        return _this;
    }
    FieldsStore.prototype.addField = function (fieldName) {
        if (this.fields[fieldName] === undefined) {
            var newField = fieldWithoutFeedback_1.default;
            this.fields[fieldName] = newField;
            this.emit(FieldEvent.Added, fieldName, newField);
        }
    };
    FieldsStore.prototype.removeField = function (fieldName) {
        console.assert(this.fields[fieldName] !== undefined, "Unknown field '" + fieldName + "'");
        delete this.fields[fieldName];
        this.emit(FieldEvent.Removed, fieldName);
    };
    FieldsStore.prototype.cloneField = function (fieldName) {
        var field = this.fields[fieldName];
        console.assert(field !== undefined, "Unknown field '" + fieldName + "'");
        var newField = {
            dirty: field.dirty,
            errors: new Set(field.errors),
            warnings: new Set(field.warnings),
            infos: new Set(field.infos),
            validationMessage: field.validationMessage
        };
        return newField;
    };
    FieldsStore.prototype.updateField = function (fieldName, field) {
        console.assert(this.fields[fieldName] !== undefined, "Unknown field '" + fieldName + "'");
        this.fields[fieldName] = field;
        this.emit(FieldEvent.Updated, fieldName);
    };
    FieldsStore.prototype.removeFieldFor = function (fieldName, fieldFeedbacksKey) {
        var field = this.fields[fieldName];
        console.assert(field !== undefined, "Unknown field '" + fieldName + "'");
        var reject = function (fieldFeedbackKey) { return fieldFeedbacksKey !== Math.floor(fieldFeedbackKey); };
        field.errors = new Set(__spread(field.errors).filter(reject));
        field.warnings = new Set(__spread(field.warnings).filter(reject));
        field.infos = new Set(__spread(field.infos).filter(reject));
        this.emit(FieldEvent.Updated, fieldName);
    };
    FieldsStore.prototype.getFieldFor = function (fieldName, fieldFeedbacksKey) {
        var field = this.fields[fieldName];
        console.assert(field !== undefined, "Unknown field '" + fieldName + "'");
        var filter = function (fieldFeedbackKey) { return fieldFeedbacksKey === Math.floor(fieldFeedbackKey); };
        var fieldFor = {
            dirty: field.dirty,
            errors: new Set(__spread(field.errors).filter(filter)),
            warnings: new Set(__spread(field.warnings).filter(filter)),
            infos: new Set(__spread(field.infos).filter(filter)),
            validationMessage: field.validationMessage
        };
        return fieldFor;
    };
    FieldsStore.prototype.containErrors = function () {
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        return fieldNames.some(function (fieldName) {
            var field = _this.fields[fieldName];
            return field !== undefined && field.errors.size > 0;
        });
    };
    FieldsStore.prototype.containWarnings = function () {
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        return fieldNames.some(function (fieldName) {
            var field = _this.fields[fieldName];
            return field !== undefined && field.warnings.size > 0;
        });
    };
    FieldsStore.prototype.containInfos = function () {
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        return fieldNames.some(function (fieldName) {
            var field = _this.fields[fieldName];
            return field !== undefined && field.infos.size > 0;
        });
    };
    FieldsStore.prototype.areValidDirtyWithoutWarnings = function () {
        var _this = this;
        var fieldNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fieldNames[_i] = arguments[_i];
        }
        return fieldNames.some(function (fieldName) {
            var field = _this.fields[fieldName];
            return field !== undefined && field.dirty === true && field.errors.size === 0 && field.warnings.size === 0;
        });
    };
    return FieldsStore;
}(EventEmitter_1.EventEmitter));
exports.FieldsStore = FieldsStore;
//# sourceMappingURL=FieldsStore.js.map