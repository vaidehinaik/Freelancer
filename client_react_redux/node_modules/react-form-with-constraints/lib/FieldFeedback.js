"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var FieldFeedback = (function (_super) {
    __extends(FieldFeedback, _super);
    function FieldFeedback(props, context) {
        var _this = _super.call(this, props) || this;
        _this.validate = _this.validate.bind(_this);
        _this.key = context.fieldFeedbacks.computeFieldFeedbackKey();
        return _this;
    }
    FieldFeedback.prototype.componentWillMount = function () {
        this.context.fieldFeedbacks.addValidateEventListener(this.validate);
    };
    FieldFeedback.prototype.componentWillUnmount = function () {
        this.context.fieldFeedbacks.removeValidateEventListener(this.validate);
    };
    FieldFeedback.prototype.validate = function (input) {
        var _a = this.props, when = _a.when, warning = _a.warning, info = _a.info;
        var fieldName = this.context.fieldFeedbacks.props.for;
        var show = false;
        if (typeof when === 'function') {
            var constraintViolation = when(input.value);
            if (constraintViolation) {
                show = true;
            }
        }
        else if (typeof when === 'string') {
            var validity = input.validity;
            if (!validity.valid) {
                if (when === '*') {
                    show = true;
                }
                else if (validity.badInput && when === 'badInput' ||
                    validity.patternMismatch && when === 'patternMismatch' ||
                    validity.rangeOverflow && when === 'rangeOverflow' ||
                    validity.rangeUnderflow && when === 'rangeUnderflow' ||
                    validity.stepMismatch && when === 'stepMismatch' ||
                    validity.tooLong && when === 'tooLong' ||
                    validity.tooShort && when === 'tooShort' ||
                    validity.typeMismatch && when === 'typeMismatch' ||
                    validity.valueMissing && when === 'valueMissing') {
                    show = true;
                }
            }
        }
        else {
            throw new TypeError("Invalid FieldFeedback 'when' type: " + typeof when);
        }
        var field = this.context.form.fieldsStore.cloneField(fieldName);
        field.dirty = true;
        field.validationMessage = input.validationMessage;
        if (show) {
            if (warning)
                field.warnings.add(this.key);
            else if (info)
                field.infos.add(this.key);
            else
                field.errors.add(this.key);
        }
        this.context.form.fieldsStore.updateField(fieldName, field);
    };
    FieldFeedback.prototype.render = function () {
        var _a = this.props, when = _a.when, error = _a.error, warning = _a.warning, info = _a.info, className = _a.className, children = _a.children, divProps = __rest(_a, ["when", "error", "warning", "info", "className", "children"]);
        var _b = this.context.fieldFeedbacks.props, fieldName = _b.for, show = _b.show;
        var _c = this.context.form.fieldsStore.getFieldFor(fieldName, this.context.fieldFeedbacks.key), errors = _c.errors, warnings = _c.warnings, infos = _c.infos, validationMessage = _c.validationMessage;
        var firstError = errors.values().next().value;
        var firstWarning = warnings.values().next().value;
        var classes;
        if (errors.has(this.key) && (show === 'all' || (show === 'first' && firstError === this.key))) {
            classes = 'error';
        }
        else if (warnings.has(this.key) && (errors.size === 0 && (show === 'all' || (show === 'first' && firstWarning === this.key)))) {
            classes = 'warning';
        }
        else if (infos.has(this.key)) {
            classes = 'info';
        }
        var feedback = null;
        if (classes !== undefined) {
            classes = className !== undefined ? className + " " + classes : classes;
            feedback = children !== undefined ? children : validationMessage;
        }
        return feedback !== null ? React.createElement("div", __assign({}, divProps, { className: classes }), feedback) : null;
    };
    FieldFeedback.contextTypes = {
        form: PropTypes.object.isRequired,
        fieldFeedbacks: PropTypes.object.isRequired
    };
    return FieldFeedback;
}(React.Component));
exports.FieldFeedback = FieldFeedback;
//# sourceMappingURL=FieldFeedback.js.map