/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormWithConstraintsChildContext } from './FormWithConstraints';
import { FieldFeedbacksChildContext } from './FieldFeedbacks';
import Input from './Input';
export declare type WhenString = '*' | 'badInput' | 'patternMismatch' | 'rangeOverflow' | 'rangeUnderflow' | 'stepMismatch' | 'tooLong' | 'tooShort' | 'typeMismatch' | 'valueMissing';
export declare type WhenFn = (value: string) => boolean;
export declare type When = WhenString | WhenFn;
export interface FieldFeedbackProps extends React.HTMLAttributes<HTMLDivElement> {
    when: When;
    error?: boolean;
    warning?: boolean;
    info?: boolean;
}
export declare type FieldFeedbackContext = FormWithConstraintsChildContext & FieldFeedbacksChildContext;
export declare class FieldFeedback extends React.Component<FieldFeedbackProps> {
    static contextTypes: {
        form: PropTypes.Validator<any>;
        fieldFeedbacks: PropTypes.Validator<any>;
    };
    context: FieldFeedbackContext;
    key: number;
    constructor(props: FieldFeedbackProps, context: FieldFeedbackContext);
    componentWillMount(): void;
    componentWillUnmount(): void;
    validate(input: Input): void;
    render(): JSX.Element | null;
}
