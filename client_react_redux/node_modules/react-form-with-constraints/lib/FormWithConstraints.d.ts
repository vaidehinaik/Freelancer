/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { IValidateEventEmitter } from './withValidateEventEmitter';
import { EventEmitter } from './EventEmitter';
import Input from './Input';
import { FieldsStore } from './FieldsStore';
export interface FormWithConstraintsChildContext {
    form: IFormWithConstraints;
}
export interface FormWithConstraintsProps extends React.FormHTMLAttributes<HTMLFormElement> {
}
export interface IFormWithConstraints extends IValidateEventEmitter {
    fieldsStore: FieldsStore;
    computeFieldFeedbacksKey(): number;
}
export declare class FormWithConstraintsComponent extends React.Component<FormWithConstraintsProps> {
}
declare const FormWithConstraints_base: {
    new (...args: any[]): {
        validateEventEmitter: EventEmitter;
        emitValidateEvent(input: Input): void;
        addValidateEventListener(listener: (input: Input) => void): void;
        removeValidateEventListener(listener: (input: Input) => void): void;
    };
} & typeof FormWithConstraintsComponent;
export declare class FormWithConstraints extends FormWithConstraints_base implements IFormWithConstraints {
    static childContextTypes: {
        form: PropTypes.Validator<any>;
    };
    getChildContext(): FormWithConstraintsChildContext;
    form: HTMLFormElement;
    fieldsStore: FieldsStore;
    private fieldFeedbacksKey;
    computeFieldFeedbacksKey(): number;
    validateFields(...inputsOrNames: Array<Input | string>): void;
    isValid(): boolean;
    render(): JSX.Element;
}
