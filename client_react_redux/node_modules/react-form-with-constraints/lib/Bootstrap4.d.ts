/// <reference types="react" />
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Input, FormWithConstraintsChildContext, FieldFeedbacksProps } from './index';
export interface FormGroupProps extends React.HTMLAttributes<HTMLDivElement> {
    for?: string;
}
export declare class FormGroup extends React.Component<FormGroupProps> {
    static contextTypes: {
        form: PropTypes.Validator<any>;
    };
    context: FormWithConstraintsChildContext;
    constructor(props: FormGroupProps);
    componentWillMount(): void;
    componentWillUnmount(): void;
    reRender(input: Input): void;
    className(fieldName: string | undefined): string;
    render(): JSX.Element;
}
export interface FormControlLabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
}
declare const FormControlLabel: React.SFC<FormControlLabelProps>;
export { FormControlLabel };
export interface FormControlInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
    innerRef?: React.Ref<HTMLInputElement>;
}
export declare class FormControlInput extends React.Component<FormControlInputProps> {
    static contextTypes: {
        form: PropTypes.Validator<any>;
    };
    context: FormWithConstraintsChildContext;
    constructor(props: FormControlInputProps);
    componentWillMount(): void;
    componentWillUnmount(): void;
    reRender(input: Input): void;
    className(name: string | undefined): string;
    render(): JSX.Element;
}
declare const FieldFeedbacks: React.SFC<FieldFeedbacksProps>;
export { FieldFeedbacks };
export interface LabelWithFormControlStyleProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
    for: string[];
}
export declare class LabelWithFormControlStyle extends React.Component<LabelWithFormControlStyleProps> {
    static contextTypes: {
        form: PropTypes.Validator<any>;
    };
    context: FormWithConstraintsChildContext;
    constructor(props: LabelWithFormControlStyleProps);
    componentWillMount(): void;
    componentWillUnmount(): void;
    reRender(input: Input): void;
    render(): JSX.Element;
}
